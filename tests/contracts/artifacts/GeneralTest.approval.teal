#pragma version 9

txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_txnTypeEnum:
	// no dupn needed
	callsub txnTypeEnum
	int 1
	return

txnTypeEnum:
	proto 0 0

	// tests/contracts/general.algo.ts:6
	// assert(this.txnGroup[0].typeEnum === TransactionType.Payment)
	int 0
	gtxns TypeEnum
	int pay
	==
	assert
	retsub

abi_route_txnGroupLength:
	// no dupn needed
	callsub txnGroupLength
	int 1
	return

txnGroupLength:
	proto 0 0

	// tests/contracts/general.algo.ts:10
	// return this.txnGroup.length;
	global GroupSize
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_asserts:
	// no dupn needed
	txna ApplicationArgs 2
	int 0
	getbit
	txna ApplicationArgs 1
	int 0
	getbit
	callsub asserts
	int 1
	return

asserts:
	proto 2 0

	// tests/contracts/general.algo.ts:14
	// assert(arg1, arg2, arg1 === arg2)
	frame_dig -1 // arg1: bool
	assert
	frame_dig -2 // arg2: bool
	assert
	frame_dig -1 // arg1: bool
	frame_dig -2 // arg2: bool
	==
	assert
	retsub

abi_route_verifyTxnFromArg:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub verifyTxnFromArg
	int 1
	return

verifyTxnFromArg:
	proto 1 0

	// tests/contracts/general.algo.ts:18
	// verifyTxn(somePay, { receiver: this.app.address, amount: 100_000 })
	// verify receiver
	frame_dig -1 // somePay: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 100_000
	==
	assert
	retsub

abi_route_verifyTxnFromTxnGroup:
	// no dupn needed
	callsub verifyTxnFromTxnGroup
	int 1
	return

verifyTxnFromTxnGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:22
	// verifyTxn(this.txnGroup[0 + 1], { receiver: this.app.address, amount: 100_000 })
	int 0
	int 1
	+
	store 8 // verifyTxn index

	// verify receiver
	load 8 // verifyTxn index
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	load 8 // verifyTxn index
	gtxns Amount
	int 100_000
	==
	assert
	retsub

abi_route_verifyTxnCondition:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub verifyTxnCondition
	int 1
	return

verifyTxnCondition:
	proto 1 0

	// tests/contracts/general.algo.ts:26
	// verifyTxn(somePay, {
	// verify receiver
	frame_dig -1 // somePay: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	>
	assert
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 10
	<=
	assert
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 5
	!=
	assert
	retsub

abi_route_verifyTxnIncludedIn:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub verifyTxnIncludedIn
	int 1
	return

verifyTxnIncludedIn:
	proto 1 0

	// tests/contracts/general.algo.ts:33
	// verifyTxn(somePay, {
	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	==
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 2
	==
	||
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 3
	==
	||
	assert
	retsub

abi_route_verifyTxnNotIncludedIn:
	// no dupn needed
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert
	callsub verifyTxnNotIncludedIn
	int 1
	return

verifyTxnNotIncludedIn:
	proto 1 0

	// tests/contracts/general.algo.ts:39
	// verifyTxn(somePay, {
	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	!=
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 2
	!=
	||
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 3
	!=
	||
	assert
	retsub

abi_route_submitPendingGroup:
	// no dupn needed
	callsub submitPendingGroup
	int 1
	return

submitPendingGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:45
	// this.pendingGroup.addPayment({ amount: 100_000, receiver: this.app.address })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:45
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:45
	// receiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:46
	// this.pendingGroup.addAssetCreation({ configAssetTotal: 1 })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:46
	// configAssetTotal: 1
	int 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:47
	// this.pendingGroup.submit()
	itxn_submit
	retsub

abi_route_methodWithTxnArgs:
	// no dupn needed
	callsub methodWithTxnArgs
	int 1
	return

methodWithTxnArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:51
	// sendMethodCall<[InnerPayment, InnerMethodCall<[uint64], void>], void>({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:54
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:54
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "bar(uint64)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:57
	// applicationID: Application.fromIndex(1337)
	int 1337
	itxn_field ApplicationID

	// tests/contracts/general.algo.ts:58
	// methodArgs: [1]
	int 1
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "foo(pay,appl)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:53
	// methodArgs: [
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

abi_route_nestedTernary:
	// no dupn needed
	txna ApplicationArgs 2
	int 0
	getbit
	txna ApplicationArgs 1
	int 0
	getbit
	callsub nestedTernary
	int 1
	return

nestedTernary:
	proto 2 0

	// tests/contracts/general.algo.ts:65
	// return x ? 1 : y ? 2 : 3;
	frame_dig -1 // x: bool
	bz ternary0_false
	int 1
	b ternary0_end

ternary0_false:
	frame_dig -2 // y: bool
	bz ternary1_false
	int 2
	b ternary1_end

ternary1_false:
	int 3

ternary1_end:

ternary0_end:
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_defaultTEALScriptCreate:
	int 1
	return

create_NoOp:
	txn NumAppArgs
	bz abi_route_defaultTEALScriptCreate
	err

call_NoOp:
	method "txnTypeEnum()void"
	method "txnGroupLength()uint64"
	method "asserts(bool,bool)void"
	method "verifyTxnFromArg(pay)void"
	method "verifyTxnFromTxnGroup()void"
	method "verifyTxnCondition(pay)void"
	method "verifyTxnIncludedIn(pay)void"
	method "verifyTxnNotIncludedIn(pay)void"
	method "submitPendingGroup()void"
	method "methodWithTxnArgs()void"
	method "nestedTernary(bool,bool)uint64"
	txna ApplicationArgs 0
	match abi_route_txnTypeEnum abi_route_txnGroupLength abi_route_asserts abi_route_verifyTxnFromArg abi_route_verifyTxnFromTxnGroup abi_route_verifyTxnCondition abi_route_verifyTxnIncludedIn abi_route_verifyTxnNotIncludedIn abi_route_submitPendingGroup abi_route_methodWithTxnArgs abi_route_nestedTernary
	err